if(!0===adminState){$("#addresses").after('<div id="massiveChange" class="modal fade hide" tabindex="-1"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">×</button><h3>Batch edit</h3></div><div class="modal-body"><p>You may here overwrite any fields in all open entries:</p><p id="fieldPicker"></p></div><div class="modal-footer"><button class="btn btn-secondary" data-dismiss="modal">Close</button><button type="button" id="cmd-mass-change" class="btn btn-primary">Batch edit</button></div></div>'),$("#addresses").after('<div id="errorMessage" class="modal fade hide" tabindex="-1"><div class="modal-header"><h3>Error</h3></div><div class="modal-body"><p id="errorText"></p></div><div class="modal-footer"><button class="btn" data-dismiss="modal">OK</button></div></div></div><div id="deleteMessage" class="modal fade hide" tabindex="-1"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">×</button><h3>Massive delete</h3></div><div class="modal-body"><p>By clicking <strong>Delete</strong>, you are confirming that you would like to <strong>permanently delete</strong> all rows currently opened on this page.</p></div><div class="modal-footer"><p><button type="button" id="cmd-mass-delete" class="btn btn-danger">Delete</button></p></div></div>'),$(document).on("click",".cmd-osm",function(){var elem=this,prevAddress=$(elem).siblings("[name='address']").val(),prevCity=$(elem).siblings("[name='city']").val(),prevPostCode=$(elem).siblings("[name='postcode']").val(),prevLat=$(elem).siblings("[name='lat']").val(),prevLng=$(elem).siblings("[name='lng']").val();$.getJSON("https://nominatim.openstreetmap.org/search?street="+encodeURIComponent(prevAddress)+"&city="+encodeURIComponent(prevCity)+"&state=quebec&country=canada&format=json&addressdetails=1").done(function(data){try{var initialData=data;if(1==(data=$.grep(data,function(a){return"node"===a.osm_type||"house"===a.type})).length){var newAddress=data[0].address.house_number+" "+data[0].address.road,newCity="",newPostCode="";"city_district"in data[0].address?newCity=data[0].address.city_district:"suburb"in data[0].address?newCity=data[0].address.suburb:"town"in data[0].address?newCity=data[0].address.town:"village"in data[0].address?newCity=data[0].address.village:"city"in data[0].address&&(newCity=data[0].address.city),newPostCode="postcode"in data[0].address?data[0].address.postcode:prevPostCode;var newLat=data[0].lat,newLng=data[0].lon;if([newAddress,newCity,newPostCode,newLat,newLng].join(", ")!=[prevAddress,prevCity,prevPostCode,prevLat,prevLng].join(", ")){var modified=[];newAddress!=prevAddress&&($(elem).siblings("[name='address']").val(newAddress),""===prevAddress&&(prevAddress="blank address"),modified.push(prevAddress)),newCity!=prevCity&&($(elem).siblings("[name='city']").val(newCity),""===prevCity&&(prevCity="blank city"),modified.push(prevCity)),newPostCode!=prevPostCode&&($(elem).siblings("[name='postcode']").val(newPostCode),""===prevPostCode&&(prevPostCode="blank postal code"),modified.push(prevPostCode)),newLat!=prevLat&&($(elem).siblings("[name='lat']").val(newLat),""===prevLat&&(prevLat="blank latitude"),modified.push(prevLat)),newLng!=prevLng&&($(elem).siblings("[name='lng']").val(newLng),""===prevLng&&(prevLng="blank longitude"),modified.push(prevLng)),newProv!=prevProv&&($(elem).siblings("[name='province']").val(newProv),""===prevProv&&(prevProv="blank province"),modified.push(prevProv)),$(elem).siblings("[name='country']").val("Canada"),$(elem).closest("td").find("#geoMessage").html("Replaced: "+modified.join(", "))}else $(elem).closest("td").find("#geoMessage").html("The geotag operation did not reveal new or updated information."),isBatch&&$(elem).closest("tr").find(".cmd-cancel").click()}else 0===data.length?($(elem).siblings("#geoMessage").html("Failed to geocode: no matches!"),console.log(initialData)):($(elem).siblings("#geoMessage").html("Failed to geocode: too many matches"),console.log(initialData))}catch(err){$("#errorText").html(err),$("#error-show").click()}})}),$(document).on("click",".cmd-bing",function(){var elem=this,prevAddress=$(elem).siblings("[name='address']").val(),prevCity=$(elem).siblings("[name='city']").val(),prevPostCode=$(elem).siblings("[name='postcode']").val(),prevProvince=$(elem).siblings("[name='province']").val(),prevLat=$(elem).siblings("[name='lat']").val(),prevLng=$(elem).siblings("[name='lng']").val();$.getJSON("https://dev.virtualearth.net/REST/v1/Locations/"+encodeURIComponent([prevAddress,prevCity,prevPostCode,prevProvince,"Canada"].join(", "))+"?key="+bingAPIKey+"&output=JSON").done(function(data){try{if("High"==data.resourceSets[0].resources[0].confidence&&"Good"==data.resourceSets[0].resources[0].matchCodes[0]&&"Address"==data.resourceSets[0].resources[0].entityType){var newAddress=data.resourceSets[0].resources[0].address.addressLine,newCity=data.resourceSets[0].resources[0].address.locality,newPostCode=data.resourceSets[0].resources[0].address.postalCode,newProvince=data.resourceSets[0].resources[0].address.adminDistrict,newLat=data.resourceSets[0].resources[0].point.coordinates[0],newLng=data.resourceSets[0].resources[0].point.coordinates[1];if([newAddress,newCity,newPostCode,newLat,newLng,newProvince].join(", ")!=[prevAddress,prevCity,prevPostCode,prevLat,prevLng,prevProvince].join(", ")){var modified=[];newAddress!=prevAddress&&($(elem).siblings("[name='address']").val(newAddress),""===prevAddress&&(prevAddress="blank address"),modified.push(prevAddress)),newCity!=prevCity&&($(elem).siblings("[name='city']").val(newCity),""===prevCity&&(prevCity="blank city"),modified.push(prevCity)),newPostCode!=prevPostCode&&($(elem).siblings("[name='postcode']").val(newPostCode),""===prevPostCode&&(prevPostCode="blank postal code"),modified.push(prevPostCode)),newLat!=prevLat&&($(elem).siblings("[name='lat']").val(newLat),""===prevLat&&(prevLat="blank latitude"),modified.push(prevLat)),newLng!=prevLng&&($(elem).siblings("[name='lng']").val(newLng),""===prevLng&&(prevLng="blank longitude"),modified.push(prevLng)),newProvince!=prevProvince&&($(elem).siblings("[name='province']").val(newProvince),""===prevProvince&&(prevProvince="blank province"),modified.push(prevProvince)),$(elem).siblings("[name='country']").val("Canada"),$(elem).closest("td").find("#geoMessage").html("Replaced: "+modified.join(", "))}else $(elem).closest("td").find("#geoMessage").html("The geotag operation did not reveal new or updated information."),isBatch&&$(elem).closest("tr").find(".cmd-cancel").click()}else $(elem).siblings("#geoMessage").html("Failed to geocode: Confidence not high enough")}catch(err){$("#errorText").html(err),$("#error-show").click()}})});var target=$("#addresses").parent()[0],observer=new MutationObserver(function(mutations){mutations.forEach(function(mutation){mutation.addedNodes.length>0&&"childList"==mutation.type&&($(mutation.addedNodes).find(".cmd-geocode").html("Google"),$(mutation.addedNodes).find("[name='lng']").siblings("small.muted").before("<small class='muted' id='geoMessage'></small><br/>"),$(mutation.addedNodes).find(".cmd-geocode").after('<button type="button" class="btn btn-info btn-small cmd-bing">Bing</button><br/>'),$(mutation.addedNodes).find(".cmd-geocode").after('<button type="button" class="btn btn-info btn-small cmd-osm">OSM</button>'),$(mutation.addedNodes).find("small.tt").each(function(){$(this).html($(this).html()+": "+$(this).data("original-title").split(" by ")[1].match(/\b(\w)/g).join(""))}))})}),config={childList:!0,subtree:!0};observer.observe(target,config),$("td.person small.tt").each(function(){$(this).html($(this).html()+": "+$(this).data("original-title").split(" by ")[1].match(/\b(\w)/g).join(""))}),$("li.visible-desktop").after("<li class='dropdown admin'><button id='dropdown-admin' class='btn btn-lg btn-danger' data-toggle='dropdown'>Admin</button><ul class='dropdown-menu'><li><a id='select-all'>Open all entries for editing</a></li><li class='divider'></li><li><a id='bing-all'>Correct opened addresses using Bing</a></li><li><a id='osm-all'>Correct opened addresses using OSM</a></li><li><a id='massive-change' href='#massiveChange' data-toggle='modal'>Batch edit fields in opened entries</a></li><li><a id='search-replace'>Search and replace in all opened entries</a></li><li class='divider'></li><li><a id='save-all'>Save all opened entries</a></li><li><a id='delete-all'>Delete all opened entries</a></li><li><a id='cancel-all'>Cancel all modifications</a></li></ul></li><button id='error-show' href='#errorMessage' class='hide' data-toggle='modal'>Error</button><button id='delete-show' href='#deleteMessage' class='hide' data-toggle='modal'>Error</button>"),$("#select-all").click(function(){$.fx.off=!0,$("#addresses tr").click()}),$("#bing-all").click(function(){var counter=0;for(let i=$(".cmd-bing").length;i>0;i--)setTimeout(function(){console.log('$(".cmd-bing").eq('+(i-1)+").click();"),$(".cmd-bing").eq(i-1).click()},100*counter),counter++}),$("#osm-all").click(function(){$(".cmd-osm").click()}),$("#search-replace").click(function(){var regexP=prompt("Please enter the regex search expression here:");try{if(""===regexP||void 0===regexP)throw"No regex search expression was entered.";var regex=new RegExp(regexP,"gim"),matches=[];if($("#addresses input[type='text'], #addresses select, #addresses textarea").each(function(){$(this).val().match(regex)&&matches.push($(this).val())}),!(matches.length>0))throw"There were no matches to your search pattern.";var replaceP=prompt("Please enter the replacement value here:"),promptMessage="The following matches will be replaced as follows:\n__________________________________\n";if(matches.forEach(function(v,k){promptMessage+="\n"+v+"       ->       "+v.replace(regex,replaceP)}),!confirm(promptMessage))throw"The replace operation was cancelled.";$("#addresses input[type='text'], #addresses select, #addresses textarea").each(function(){$(this).val($(this).val().replace(regex,replaceP))})}catch(err){$("#errorText").html(err),$("#error-show").click()}}),$("#massive-change").click(function(){$("#fieldPicker").html(""),$("#addresses tr.edit:first").find("select:visible, input:visible, textarea:visible").clone().each(function(element){$(this).addClass("massiveField").val(""),$("#fieldPicker").append("<span class='massiveLabel'>"+$(this).prop("name")+"</span>",$(this)),$("#fieldPicker").append("<br/>")})}),$("#cmd-mass-change").click(function(){$(".massiveField").each(function(){if(""!=$(this).val()&&null!=$(this).val()){var newValue=$(this).val();$("[name="+$(this).prop("name")+"]").each(function(){console.log(this.nodeName),"textarea"==this.nodeName.toLowerCase()&&(newValue=$(this).val().trim()+"\n"+newValue),$(this).val(newValue.replace(/[\n]+/g,"\n").trim())})}}),$("#massiveChange .btn-secondary").click()}),$("#save-all").click(function(){$(".cmd-save").click()}),$("#delete-all").click(function(){$("#delete-show").click()}),$("#cmd-mass-delete").click(function(){$("#deleteMessage .close").click(),$(".cmd-delete").click(),$(".bootbox .modal-footer a.btn-primary").each(function(){$(this).get(0).click()})}),$("#cancel-all").click(function(){$(".cmd-cancel").click()});var isBatch=!1;$("#dropdown-admin").on("click",function(){$(".dropdown-menu").is(":visible")?$.fx.off=!1:($.fx.off=!0,0===$("#addresses tr.edit").length?$("#massive-change, #bing-all, #osm-all, #search-replace, #save-all, #delete-all, #cancel-all").parent("li").addClass("disabled"):$("#massive-change, #bing-all, #osm-all, #search-replace, #save-all, #delete-all, #cancel-all").parent("li").removeClass("disabled"),isBatch=$("#addresses tr.edit").length>1&&!0)})}